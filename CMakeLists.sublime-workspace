{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"time_be",
				"time_bef_nn"
			],
			[
				"dis",
				"dis_cost"
			],
			[
				"cube1s",
				"cube1s_c"
			],
			[
				"ctr",
				"ctrlPts"
			],
			[
				"Ve",
				"Vector3d"
			],
			[
				"min_",
				"min_dis"
			],
			[
				"scale",
				"scale_k"
			],
			[
				"ROS",
				"ROS_WARN"
			],
			[
				"track_",
				"track_id"
			],
			[
				"print",
				"printBox"
			],
			[
				"split",
				"splitPoints"
			],
			[
				"vis",
				"visSplitPoints"
			],
			[
				"_split",
				"_splitPoints_vis_pub"
			],
			[
				"cubaM",
				"cubeMax_1"
			],
			[
				"end",
				"end_pt"
			],
			[
				"targe",
				"target_pt"
			],
			[
				"trac",
				"track_id"
			],
			[
				"point",
				"pointsList"
			],
			[
				"points",
				"pointsList"
			],
			[
				"seg",
				"seg_no"
			],
			[
				"cube",
				"cube_inflate"
			],
			[
				"cube1",
				"cube1s"
			],
			[
				"_s",
				"_segment_num"
			],
			[
				"conn",
				"connectCorridor"
			],
			[
				"track",
				"trackCorridor"
			],
			[
				"stac",
				"stackTime"
			],
			[
				"con",
				"connect_corridor"
			],
			[
				"mode",
				"mode_i"
			],
			[
				"tmp",
				"tmpFreeCtrlPtsList"
			],
			[
				"init",
				"initCorridor"
			],
			[
				"tot",
				"tot_dis"
			],
			[
				"corri",
				"corridorSimplify"
			],
			[
				"flig",
				"flightSeg"
			],
			[
				"corr",
				"corridor"
			],
			[
				"fligh",
				"flightCorridor"
			],
			[
				"visC",
				"visCompleteCorridor"
			],
			[
				"round",
				"round_pos"
			],
			[
				"cube_",
				"cube_inflate"
			],
			[
				"cueb",
				"cube_inflate"
			],
			[
				"leng",
				"length_2"
			],
			[
				"len",
				"length_1"
			],
			[
				"vec",
				"Vector3d"
			],
			[
				"time",
				"time_sequence"
			],
			[
				"occ",
				"occupied"
			],
			[
				"grid",
				"grid_idx"
			],
			[
				"Gr",
				"GridNode"
			],
			[
				"Grid",
				"GridNodePtr"
			],
			[
				"corrid",
				"corridor_aug"
			],
			[
				"ret",
				"return"
			],
			[
				"max_",
				"max_y"
			],
			[
				"id",
				"id_y"
			],
			[
				"cubic",
				"cubicList"
			],
			[
				"pc",
				"pc"
			],
			[
				"Po",
				"PointXYZ"
			],
			[
				"Vec",
				"Vector3d"
			],
			[
				"samp",
				"sampleSet"
			],
			[
				"ctrl",
				"ctrlPtsList"
			],
			[
				"Point",
				"PointXYZ"
			],
			[
				"traj",
				"trajectory"
			],
			[
				"free",
				"freeCtrlPtsList"
			],
			[
				"sc",
				"scale_"
			],
			[
				"collo",
				"collision_map"
			],
			[
				"reso",
				"resolution"
			],
			[
				"Poin",
				"PointXYZ"
			],
			[
				"safe",
				"safe_dis"
			],
			[
				"Sca",
				"scale_"
			],
			[
				"ini",
				"initZ"
			],
			[
				"lo",
				"lo_bound"
			],
			[
				"star",
				"start_acc"
			],
			[
				"big",
				"bigM"
			],
			[
				"ve",
				"VectorXd"
			],
			[
				"V",
				"VectorXd"
			],
			[
				"ber",
				"_bernstein"
			],
			[
				"Z",
				"Zero"
			],
			[
				"Vex",
				"VectorXd"
			],
			[
				"Matri",
				"MatrixXd"
			],
			[
				"const",
				"constraints"
			],
			[
				"tra",
				"transpose"
			],
			[
				"n",
				"n_poly"
			],
			[
				"up",
				"up_bound"
			],
			[
				"start_",
				"start_vel"
			],
			[
				"var",
				"var_num"
			],
			[
				"max",
				"maxDis"
			],
			[
				"Vector",
				"VectorXd"
			],
			[
				"time_bef",
				"time_bef_traj"
			],
			[
				"obs",
				"obs_num"
			],
			[
				"Vect",
				"VectorXd"
			],
			[
				"ob",
				"ob_init_t"
			],
			[
				"publish",
				"publish"
			],
			[
				"head",
				"header"
			],
			[
				"Mesh",
				"MeshCloud"
			],
			[
				"Ma",
				"MatrixXd"
			],
			[
				"se",
				"sequency"
			],
			[
				"der",
				"derivative_costs"
			],
			[
				"num",
				"num_vars_free"
			],
			[
				"_ch",
				"_chomp_traj_vis"
			],
			[
				"Occ",
				"occupancyMap"
			],
			[
				"occu",
				"occupancyMap"
			],
			[
				"segn",
				"segment_num"
			],
			[
				"Comp",
				"comparison"
			],
			[
				"local",
				"localHashMap"
			],
			[
				"Ole",
				"OleDistanceCost"
			],
			[
				"clear",
				"clearance"
			],
			[
				"_vis",
				"_vis_hash_pub"
			],
			[
				"make",
				"make_pair"
			],
			[
				"push",
				"push_back"
			],
			[
				"rand",
				"rand_target_y"
			],
			[
				"_replan",
				"_replan_hz"
			],
			[
				"A_st",
				"A_star_beg"
			],
			[
				"RS",
				"ROS_ERROR"
			],
			[
				"now",
				"now_distance"
			],
			[
				"Node",
				"NodeList"
			],
			[
				"centr",
				"inform_centroid"
			],
			[
				"end_",
				"end_pt"
			],
			[
				"infor",
				"inform_sample"
			],
			[
				"inf",
				"inform_sample"
			],
			[
				"ell",
				"elli_s"
			],
			[
				"min",
				"min_distance"
			],
			[
				"pre",
				"preNode_ptr"
			],
			[
				"pin",
				"points_add"
			],
			[
				"rcv",
				"rcvMeshCloudCallBack"
			],
			[
				"sear_",
				"search_margin"
			],
			[
				"rec",
				"rcved"
			],
			[
				"del",
				"delta_time"
			],
			[
				"set",
				"setZero"
			],
			[
				"pt_pos",
				"pt_pos_lst"
			],
			[
				"pt",
				"pt_pos"
			],
			[
				"Dx",
				"Dxp_delta"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/pcd_trajectory_node.cpp",
			"settings":
			{
				"buffer_size": 44164,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/bbgf/catkin_ws/src/trajectory_optimization/src/qp_generator.cpp",
			"settings":
			{
				"buffer_size": 10966,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/bbgf/catkin_ws/src/sdf_tools/src/generate_sdf.cpp",
			"settings":
			{
				"buffer_size": 4224,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/bbgf/catkin_ws/src/trajectory_optimization/src/trajectory_optimization.cpp",
			"settings":
			{
				"buffer_size": 6243,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/bbgf/Dropbox/Gao Fei Private/backup/gradient_planner/src/gradient_trajectory_node.cpp",
			"settings":
			{
				"buffer_size": 108941,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/bbgf/catkin_ws/src/trajectory_optimization/include/two_step_optimizer.hpp",
			"settings":
			{
				"buffer_size": 16273,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/bbgf/Downloads/trajectory_optimization/record",
			"settings":
			{
				"buffer_size": 472,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 96.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Add Repository"
			],
			[
				"Package Contr",
				"Package Control: List Packages"
			],
			[
				"Package Control: sftd",
				"Package Control: Satisfy Dependencies"
			],
			[
				"sublimeclang settings",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"sublimeclang se",
				"Preferences: SublimeClang Settings – User"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 223.0,
		"history":
		[
			"import urllib.request,os;pf = 'Package Control.sublime-package';ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) );open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib.install_opener(urllib.build_opener(urllib.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')",
			"urllib.request.install_opener( urllib.request.build_opener( urllib.request.Pr",
			"ipp = sublime.installed_packages_path(); ",
			"pf = 'Package Control.sublime-package';",
			"import urllib.request,os;",
			"import urllib,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib.install_opener(urllib.build_opener(urllib.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')",
			"import urllib,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')",
			"try:",
			"import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print('Please restart Sublime Text to finish installation')",
			"mport urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"install "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/bbgf/Downloads/trajectory_optimization/include/two_step_optimizer.hpp",
		"/home/bbgf/catkin_ws/src/trajectory_optimization/src/trajectory_optimization.cpp",
		"/home/bbgf/catkin_ws/src/sdf_tools/src/generate_sdf.cpp",
		"/home/bbgf/catkin_ws/src/trajectory_optimization/CMakeLists.txt",
		"/home/bbgf/Downloads/sdf_tools/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/sdf_tools/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/src/pcd_trajectory_node.cpp",
		"/home/bbgf/catkin_ws/src/fm_planer/CMakeLists.txt",
		"/home/bbgf/Downloads/trajectory_optimization/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/fm_planer/package.xml",
		"/home/bbgf/catkin_ws/src/trajectory_optimization/package.xml",
		"/home/bbgf/Downloads/trajectory_optimization/package.xml",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/src/pcd_trajectory.sublime-project",
		"/home/bbgf/catkin_ws/src/planner/voxel_map/src/spatial_path_searcher.cpp",
		"/home/bbgf/catkin_ws/src/planner/voxel_map/include/voxel_map/spatial_path_searcher.h",
		"/home/bbgf/catkin_ws/src/planner/voxel_map/include/voxel_map/voxel_map.h",
		"/home/bbgf/catkin_ws/src/planner/voxel_map/include/pool/object_pool.h",
		"/home/bbgf/catkin_ws/src/planner/voxel_map/src/voxel_map.cpp",
		"/home/bbgf/catkin_ws/src/planner/voxel_trajectory/src/voxel_trajectory/octomap.cpp",
		"/home/bbgf/catkin_ws/src/planner/voxel_trajectory/src/voxel_trajectory/voxel_graph.cpp",
		"/home/bbgf/catkin_ws/src/planner/voxel_trajectory/src/voxel_trajectory/trajectorygenerator_no_inflation.cpp",
		"/home/bbgf/catkin_ws/src/planner/voxel_trajectory/include/voxel_trajectory/voxel_graph.h",
		"/home/bbgf/catkin_ws/src/planner/voxel_trajectory/include/voxel_trajectory/voxelgraph.h",
		"/home/bbgf/catkin_ws/src/planner/voxel_trajectory/include/voxel_trajectory/voxelserver.h",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/src/traj_server.cpp",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/src/trajectory_generator_lite.cpp",
		"/home/bbgf/catkin_ws/src/planner/odom_visualization/src/odom_visualization.cpp",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/src/bezier_base.cpp",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/launch/simulation.launch",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/random_map.cpp",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/src/random_map.cpp",
		"/home/bbgf/catkin_ws/src/planner/pcd_trajectory/src/path_finder.cpp",
		"/home/bbgf/Dropbox/6910LectureNote/gradient_traj tools/trajNLP.cpp",
		"/home/bbgf/catkin_ws/src/fm_planer/launch/sdf.launch",
		"/home/bbgf/catkin_ws/src/planner/trajectory_generator/src/trajectory_generator_node.cpp",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/qp_generator.cpp",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/bezier_base.cpp",
		"/home/bbgf/catkin_ws/src/sdf_tools/src/sdf_generation_node.cpp",
		"/home/bbgf/catkin_ws/src/sdf_tools/src/sdf_tools_tutorial.cpp",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/pcd_trajectory/src/pcd_trajectory_node.cpp",
		"/home/bbgf/catkin_ws/simple.launch",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/launch/trackning.launch",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/include/elastic_tracking/trajectory_generator_lite.h",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/include/elastic_tracking/bezier_base.h",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/include/elastic_tracking/dataType.h",
		"/home/bbgf/Desktop/TrajOpt/code/qp_generator.cpp",
		"/home/bbgf/Dropbox/Gao Fei Private/Files/my_catkin_ws/src/ekf/src/ekf_node.cpp",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/elastic_tracking_node.cpp",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/trajectory_generator_lite.cpp",
		"/home/bbgf/Dropbox/6910LectureNote/gradient_traj tools/qp_generator.h",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/gradient_planner/src/qp_generator.cpp",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/DeskTop/Code/ekf/src/ekf_node.cpp",
		"/home/bbgf/DBSCAN/CMakeLists.txt",
		"/home/bbgf/DBSCAN/PyDBSCAN.cpp",
		"/home/bbgf/DBSCAN/tests/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/cforest/CMakeLists.txt",
		"/home/bbgf/Dropbox/6910LectureNote/astar_pathfinder.h",
		"/home/bbgf/Dropbox/6910LectureNote/astar_pathfinder.cpp",
		"/home/bbgf/catkin_ws/src/cforest/src/base_planner_cu.cpp",
		"/home/bbgf/Downloads/base_planner_cu_v_0_0_9/src/base_planner_cu.cpp",
		"/home/bbgf/catkin_ws/src/fm_planer/src/fm_trajectory_node.cpp",
		"/home/bbgf/Desktop/elastic tracking/gradient_planner/src/gradient_trajectory_node.cpp",
		"/home/bbgf/catkin_ws/src/sdf_tools/src/test_voxel_grid.cpp",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/tracking_traj_server.cpp",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/gradient_path_finder.cpp",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/cj_trajectory/voxel_trajectory/src/grid_trajectory_generator_node.cpp",
		"/home/bbgf/catkin_ws/src/sdf_tools/include/sdf_tools/sdf.hpp",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/gradient_random_map.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/launch/gradient_traj.launch",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/include/gradient_planner/bezier_base.h",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/include/gradient_planner/dataType.h",
		"/home/bbgf/catkin_ws/src/planner/elastic_tracking/src/gradient_trajectory_node.cpp",
		"/home/bbgf/catkin_ws/src/sdf_wrapper/src/sdf_wrapper_node.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/include/gradient_planner/gradient_path_finder.h",
		"/usr/include/flann/algorithms/dist.h",
		"/usr/include/flann/algorithms/nn_index.h",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/gradient_planner/launch/gradient_traj.launch",
		"/home/bbgf/catkin_ws/src/sdf_wrapper/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/sdf_wrapper/package.xml",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/include/gradient_planner/voxelGrid.h",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/package.xml",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/gradient_planner/src/gradient_trajectory_node.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/gradient_traj_server.cpp",
		"/home/bbgf/mosek/7/tools/examples/c/milo1.c",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/include/gradient_planner/trajectory_generator_lite.h",
		"/home/bbgf/mosek/7/tools/examples/c/qcqo1.c",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/pcd_trajectory/src/trajectory_generator.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/include/gradient_planner/qp_generator.h",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/qp_generator.cpp",
		"/home/bbgf/catkin_ws/src/planner/trajectory_generator/src/polynomial_trajectory_generator.h",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/pcd_trajectory/launch/simulation.launch",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/gradient_planner/src/gradient_traj_server.cpp",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/pcd_trajectory/src/trajectory_generator_lite.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/trajectory_generator_lite.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/bezier_base.cpp",
		"/home/bbgf/Desktop/efficient_planning/uncomplete version/efficient_planning/include/efficient_planning/dataType.h",
		"/home/bbgf/Dropbox/Gao Fei Private/backup/Home/catkin_ws/src/planner/pcd_trajectory/src/traj_server.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/gradient_random_map.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/testNLopt.cpp",
		"/home/bbgf/ewok/ewok_optimization/src/spline_optimization_example.cpp",
		"/home/bbgf/ewok/ewok_optimization/include/ewok/polynomial_3d_optimization.h",
		"/home/bbgf/ewok/ewok_optimization/include/ewok/uniform_bspline_3d_optimization.h",
		"/home/bbgf/.local/share/Trash/files/testNLopt.c",
		"/usr/local/include/nlopt.h",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/gradient_path_finder.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/launch/simple.launch",
		"/home/bbgf/catkin_ws/src/planner/trajectory_generator/CMakeLists.txt",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/simTracker.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/testNLopt.c",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/gradient_trajectory_node_bck.cpp",
		"/home/bbgf/catkin_ws/src/planner/gradient_planner/src/gradient_planner.sublime-workspace",
		"/home/bbgf/catkin_ws/src/odom_visualization/src/odom_visualization.cpp",
		"/home/bbgf/catkin_ws/src/gradient_planner/launch/gradient_traj.launch",
		"/home/bbgf/bags/fei/code/catkin_ws/src/gradientplanner/launch/indoor.launch",
		"/home/bbgf/bags/fei/code/catkin_ws/src/gradientplanner/launch/outdoor.launch",
		"/home/bbgf/bags/fei/code/catkin_ws/src/gradientplanner/src/gradient_trajectory_node.cpp",
		"/home/bbgf/catkin_ws/src/gradient_planner/launch/vision_traj.launch",
		"/home/bbgf/catkin_ws/src/loam_velodyne/src/laserMapping.cpp",
		"/home/bbgf/catkin_ws/src/loam_velodyne/src/laserOdometry.cpp",
		"/home/bbgf/Desktop/Code/ekf/src/ekf_node.cpp",
		"/home/bbgf/catkin_ws/src/ekf/src/ekf_node.cpp",
		"/home/bbgf/catkin_ws/src/gradient_planner/src/gradient_path_finder.cpp",
		"/home/bbgf/chomp/motionoptimizer/MotionOptimizer.h",
		"/home/bbgf/chomp/demo/map2d_demo.cpp",
		"/home/bbgf/chomp/demo/Map2D.cpp",
		"/home/bbgf/chomp/demo/Map2D.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 123.0,
		"where_history":
		[
			"",
			"<current file>,<open files>",
			"<current file>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"displayTrajectory",
			"cv",
			"delta_t",
			"step",
			"getCostAndGradient",
			"optimizeTrajectory",
			"traj_pub",
			"_vis_traj_width",
			"traj_point_pub",
			"traj_pub",
			"traj_point_pub",
			"displayTrajectory",
			"get_errmsg()",
			"nlopt",
			"sdf_client",
			"_filter",
			"_idx_info",
			"retPath",
			"retPathBySrcDest",
			"getPathAStar",
			"cloudMap",
			"globalMap_pcd",
			"pubSensedPoints",
			"_all_map_pub",
			"_local_map_pub",
			"localMap_pcd",
			"_local_map_pub",
			"time_bef_evaluate",
			"time_aft_evaluate",
			"revaluate_limit",
			"RRTpathRefine",
			"revaluate_limit",
			"[path re-evaluate]",
			"worl",
			"world",
			"max_r",
			"max_radius",
			"max_r",
			"pos",
			"trajGenerator",
			"multi_poly_order",
			"RRTpathReEvaluate",
			"treeRepair",
			"goal_point",
			"init_point",
			"startPt",
			"AstarSearch",
			"NNsearch",
			"idx2pos",
			"NNsearch",
			"NNsearcj",
			"rcvPoint",
			"min_volume",
			"ros::Time::now",
			"timeAllocation",
			"initCorridorGeneration",
			"timeAllocation",
			"initCorridorGeneration",
			"timeAllocation",
			"flightCorridorGeneration",
			"timeAllocation",
			"timeAllocation\\",
			"timeAllocation",
			"flightCorridorGeneration",
			"timeAllocation",
			"connectCorridorGeneration",
			"timeAllocation",
			"initCorridorGeneration",
			"initCorridor",
			"timeAllocation",
			"trackCorridorGeneration",
			"connectCorridorGeneration",
			"timeAllocation",
			"initCorridorGeneration",
			"flightCorridorGeneration",
			"initCorridorGeneration",
			"trackCorridorGeneration",
			"initCorridorGeneration",
			"timeAllocation",
			"safe_dis",
			"getDis",
			"obj_pt",
			"Collision Occu",
			"Collision Occur",
			"rcvOdometryCallbck",
			"flightCorridorGeneration",
			"visFreeTraj",
			"safeTrajSplit",
			"flightCorridorGeneration",
			"getStateFromBezier",
			"visBezierTrajectory",
			"getBezierTraj",
			"max_dis",
			"flightCorridorGeneration",
			"trackCorridorGeneration",
			"timeAllocation",
			"flightCorridorGeneration",
			"time",
			"flightCorridor.time",
			"ctrlPts",
			"ctrlCoeff",
			"con_num",
			"con_bdk",
			"ctrlPts",
			"minDis",
			"min_dis",
			"track_id",
			"targetCoeffList",
			"flightCorridorGeneration",
			"timeAllocation",
			"flightCorridorGeneration",
			"trackCorridorGeneration",
			"flightCorridorGeneration",
			"timeAllocation",
			"trackCorridorGeneration",
			"timeAllocation",
			"stackVariable",
			"trackCorridorGeneration",
			"stackVariable",
			"trackCorridorGeneration",
			"generateCube",
			"stackVariable",
			"initCorridorGeneration",
			"connectCorridorGeneration",
			"initCorridorGeneration",
			"trackCorridorGeneration",
			"printbox",
			"stackVariable"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"double",
			"float",
			"pathPlaner->",
			"insertBlock"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/pcd_trajectory_node.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44164,
						"regions":
						{
						},
						"selection":
						[
							[
								32714,
								32714
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9586.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/bbgf/catkin_ws/src/trajectory_optimization/src/qp_generator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10966,
						"regions":
						{
						},
						"selection":
						[
							[
								110,
								110
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 336.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/bbgf/catkin_ws/src/sdf_tools/src/generate_sdf.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4224,
						"regions":
						{
						},
						"selection":
						[
							[
								1460,
								1460
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/bbgf/catkin_ws/src/trajectory_optimization/src/trajectory_optimization.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6243,
						"regions":
						{
						},
						"selection":
						[
							[
								499,
								499
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/bbgf/Dropbox/Gao Fei Private/backup/gradient_planner/src/gradient_trajectory_node.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 108941,
						"regions":
						{
						},
						"selection":
						[
							[
								93378,
								93378
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 37692.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/bbgf/catkin_ws/src/trajectory_optimization/include/two_step_optimizer.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16273,
						"regions":
						{
						},
						"selection":
						[
							[
								3623,
								3623
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1455.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/bbgf/Downloads/trajectory_optimization/record",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 472,
						"regions":
						{
						},
						"selection":
						[
							[
								383,
								383
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "CMakeLists.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"iarcfsm.cpp",
				"iarc/iarc/src/task/IARCFSM.cpp"
			],
			[
				"trajeccmake",
				"src/trajectory_generator/CMakeLists.txt"
			],
			[
				"trajecmakelist",
				"src/trajectory_generator/CMakeLists.txt"
			],
			[
				"trajectonode",
				"src/trajectory_generator/src/trajectory_generator_node.cpp"
			],
			[
				"sim.launch",
				"src/iarc/iarc/launch/sim.launch"
			],
			[
				"",
				"voxel_trajectory/src/grid_trajectory_generator_node.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/catkin_ws/src/pcd_trajectory/src/pcd_trajectory.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 431.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 298.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
